{"version":3,"sources":["serviceWorker.js","components/Header.js","components/InputTodo.js","components/TodoItem.js","components/TodoList.js","components/TodoContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","className","style","fontSize","color","InputTodo","todoToAddChanged","e","setState","target","name","value","handleSubmit","preventDefault","props","addTodoProps","state","title","onSubmit","this","type","placeholder","onChange","React","Component","TodoItem","todo","id","completed","checked","handleChangeProps","textDecoration","onClick","deleteTodoProps","TodoList","todos","map","key","TodoContainer","handleChange","todoItems","delTodo","filter","addTodoItem","newTodo","uuid","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e5507f3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nconst Header = () => {\r\n\r\n    const headerStyle = {\r\n        fontSize:'60px', \r\n        color:'black'\r\n    }\r\n    return (\r\n        <>\r\n        <div className=\"header\">\r\n            <h1 style={headerStyle}>Simple Todo App</h1>\r\n            <p>Please add to-dos item(s) through the input field</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default Header;","import React from 'react'\r\nclass InputTodo extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            title:\"\"\r\n        }\r\n    }    \r\n    todoToAddChanged = e => {\r\n        // console.log('changed called')\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        // console.log(this.state.title);\r\n        this.props.addTodoProps(this.state.title)\r\n        this.setState({\r\n            title:\"\"\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <>\r\n                <form className=\"input-todo\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"title\" placeholder=\"Add todo..\" onChange={this.todoToAddChanged} value={this.state.title}/>\r\n                    <input type=\"submit\" value=\"Add\"/>\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default InputTodo;","import React from 'react';\r\nclass TodoItem extends React.Component{\r\n    render(){\r\n        const orangeCancle ={\r\n            textDecoration: \"line-through\",\r\n            color: \"orange\"\r\n        }\r\n        const {id,title,completed} = this.props.todo;\r\n        return(\r\n            <>\r\n                <div className=\"todo-item\">\r\n                    <input  type=\"checkbox\" \r\n                    checked={completed} \r\n                    onChange={ () => this.props.handleChangeProps(id)} />\r\n                    <span style={ completed ? orangeCancle :  null }>{title}</span>\r\n                    <input type=\"submit\"  value=\"Delete\" \r\n                    onClick={ () => this.props.deleteTodoProps(id) } />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default TodoItem;","import React from 'react'\r\nimport TodoItem from './TodoItem'\r\nclass TodoList extends React.Component{\r\n    render(){\r\n        return(\r\n            <>\r\n                { \r\n                    this.props.todos.map(todo => (\r\n                        <TodoItem \r\n                        key={todo.id} \r\n                        todo={todo} \r\n                        handleChangeProps={this.props.handleChangeProps} \r\n                        deleteTodoProps={this.props.deleteTodoProps} />\r\n                    ))\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default TodoList;","import React from 'react';\r\nimport Header from './Header';\r\nimport InputTodo from './InputTodo';\r\nimport TodoList from './TodoList';\r\nimport uuid from \"uuid/v4\";\r\nclass TodoContainer extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todoItems:[\r\n                {\r\n                    id:uuid(),\r\n                    title:'learn react js basic',\r\n                    completed:true\r\n                },\r\n                {\r\n                    id:uuid(),\r\n                    title:'react hooks',\r\n                    completed:false\r\n                },\r\n                {\r\n                    id:uuid(),\r\n                    title:'redux',\r\n                    completed:false\r\n                },\r\n                {\r\n                    id:uuid(),\r\n                    title:'apply react in real project',\r\n                    completed:false\r\n                },\r\n                {\r\n                    id:uuid(),\r\n                    title:'learn react native',\r\n                    completed:false\r\n                }\r\n            ]\r\n        }\r\n    }\r\n    handleChange = id => {\r\n        this.setState({\r\n            todoItems: this.state.todoItems.map( todo => { \r\n                todo.id === id ? todo.completed = !todo.completed : todo.completed = todo.completed;\r\n                return todo;\r\n            })\r\n        })\r\n    }\r\n    delTodo = id => {\r\n        // console.log('del '+id)\r\n        this.setState({\r\n            todoItems: [...this.state.todoItems.filter(todo=>{\r\n                    return todo.id !== id;\r\n            })]\r\n        })\r\n    }\r\n    addTodoItem = title => {\r\n        // console.log(title);\r\n        const newTodo = {\r\n            id:uuid(),\r\n            title:title,\r\n            completed:false\r\n        }\r\n        this.setState({\r\n            todoItems:[...this.state.todoItems,newTodo]\r\n        })\r\n    };\r\n    render(){\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Header/>\r\n                    <InputTodo addTodoProps={this.addTodoItem} />\r\n                    <TodoList \r\n                    todos={this.state.todoItems}  \r\n                    handleChangeProps={this.handleChange} \r\n                    deleteTodoProps={this.delTodo} />\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default TodoContainer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport TodoContainer from './components/TodoContainer'\nimport './style.css'\n\nReactDOM.render(<TodoContainer/>, document.getElementById('root') );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}